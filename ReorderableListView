import 'package:flutter/material.dart';
void main() => runApp(const ReorderableApp());

class ReorderableApp extends StatelessWidget {
  const ReorderableApp({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(title: const Text('ReorderableListView Example')),
        body: const ReorderableExample(),
      ),
    );
  }
}
class ReorderableExample extends StatefulWidget {
  const ReorderableExample({super.key});
  @override
  State<ReorderableExample> createState() => _ReorderableListViewExampleState();
}

class _ReorderableListViewExampleState extends State<ReorderableExample> {
  final List<int> _items = List<int>.generate(5, (int index) => index);
  @override
  Widget build(BuildContext context) {
    const Color oddItemColor = Color.fromARGB(255, 212, 222, 224);
    const Color evenItemColor = Color.fromARGB(255, 124, 179, 223);
    return ReorderableListView(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 20),
      proxyDecorator: (Widget child, int index, Animation<double> animation) {
    return AnimatedBuilder(
      animation: animation,
      builder: (BuildContext context, Widget? child) {
        return Material(
          elevation: 2.5,
          shadowColor: const Color.fromARGB(255, 206, 33, 33),
          child: child,
        );
      },
      child: child,
    );
  },
      children: <Widget>[
        for (int index = 0; index < _items.length; index += 1)
          ListTile(
            key: Key('$index'),
            tileColor: _items[index].isOdd ? oddItemColor : evenItemColor,
            title: Text('Item ${_items[index]}'),
          ),
      ],
      onReorder: (int oldIndex, int newIndex) {
        setState(() {
          if (oldIndex < newIndex) {
            newIndex -= 1;
          }
          final int item = _items.removeAt(oldIndex);
          _items.insert(newIndex, item);
        });
      },
    );
  }
}
